# commands/steam.py

import re
import logging

import discord
import config  # DEVELOPMENT_GUILD_ID = 1366412463435944026
from discord import app_commands
from discord.ext import commands
from sqlalchemy.exc import SQLAlchemyError

from database import get_db, User
from roles.constants import (
    arc_id, lrc_gimel_id, lrc_id,
    head_ji_id, adjutant_ji_id,
    leader_office_id, leader_penal_battalion_id,
    senate_id,
    director_office_id, leader_main_corps_id, leader_gimel_id,
)

# –†–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è steam-–∫–æ–º–∞–Ω–¥–∞–º–∏
ALLOWED_ISSUER_ROLES = [
    arc_id, lrc_gimel_id, lrc_id,
    head_ji_id, adjutant_ji_id,
    leader_office_id, leader_penal_battalion_id,
    senate_id,
    director_office_id, leader_main_corps_id, leader_gimel_id,
]

class SteamCog(commands.Cog):
    """
    Cog –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–æ–π SteamID:
      ‚Ä¢ /bindsteam <SteamID> [member]
      ‚Ä¢ /steamid [member]
      ‚Ä¢ /unbindsteam [member]
    """
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    async def _bind(self, steamid: str, member: discord.Member, send):
        if not re.fullmatch(r"STEAM_[0-5]:[01]:\d+", steamid):
            return await send(
                "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SteamID. –û–∂–∏–¥–∞–µ—Ç—Å—è STEAM_X:Y:Z, –≥–¥–µ X‚Äî0‚Äì5, Y‚Äî0 –∏–ª–∏ 1, Z‚Äî—á–∏—Å–ª–æ.",
                ephemeral=True
            )
        db = next(get_db())
        try:
            user = db.query(User).filter_by(discord_id=member.id).first()
            if not user:
                user = User(discord_id=member.id, steam_id=steamid)
                db.add(user)
            else:
                user.steam_id = steamid
            db.commit()
        except SQLAlchemyError:
            db.rollback()
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ SteamID")
            return await send(
                "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ SteamID –≤ –±–∞–∑–µ.",
                ephemeral=True
            )
        finally:
            db.close()

        await send(f"‚úÖ SteamID `{steamid}` –ø—Ä–∏–≤—è–∑–∞–Ω –∫ {member.mention}.")

    async def _show(self, member: discord.Member, send):
        db = next(get_db())
        try:
            user = db.query(User).filter_by(discord_id=member.id).first()
            sid = user.steam_id if user else None
        except SQLAlchemyError:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ SteamID –∏–∑ –±–∞–∑—ã")
            return await send(
                "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ SteamID –∏–∑ –±–∞–∑—ã.",
                ephemeral=True
            )
        finally:
            db.close()

        if sid:
            await send(f"üîó {member.mention} –ø—Ä–∏–≤—è–∑–∞–Ω SteamID: `{sid}`")
        else:
            await send(f"‚ÑπÔ∏è –£ {member.mention} –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ SteamID.")

    async def _unbind(self, member: discord.Member, send):
        db = next(get_db())
        try:
            user = db.query(User).filter_by(discord_id=member.id).first()
            if user and user.steam_id:
                user.steam_id = None
                db.commit()
                await send(f"‚úÖ SteamID –æ—Ç–≤—è–∑–∞–Ω –æ—Ç {member.mention}.")
            else:
                await send(f"‚ÑπÔ∏è –£ {member.mention} –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ SteamID.")
        except SQLAlchemyError:
            db.rollback()
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ SteamID")
            await send(
                "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ SteamID –∏–∑ –±–∞–∑—ã.",
                ephemeral=True
            )
        finally:
            db.close()

    # ========== –°–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã ==========

    @app_commands.guilds(discord.Object(id=config.DEVELOPMENT_GUILD_ID))
    @app_commands.command(name="bindsteam", description="–ü—Ä–∏–≤—è–∑–∞—Ç—å SteamID")
    @app_commands.describe(
        steamid="SteamID —Ñ–æ—Ä–º–∞—Ç–∞ STEAM_X:Y:Z",
        member="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤—ã)"
    )
    @app_commands.checks.has_any_role(*ALLOWED_ISSUER_ROLES)
    async def bindsteam(
        self,
        interaction: discord.Interaction,
        steamid: str,
        member: discord.Member = None
    ):
        if member is None:
            member = interaction.user  # type: ignore
        await interaction.response.defer()
        await self._bind(steamid, member, interaction.followup.send)

    @bindsteam.error
    async def bindsteam_error(self, interaction: discord.Interaction, error):
        if isinstance(error, app_commands.MissingAnyRole):
            allowed = " ".join(f"<@&{rid}>" for rid in ALLOWED_ISSUER_ROLES)
            embed = discord.Embed(
                title="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω",
                description="–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
                color=discord.Color.red()
            )
            embed.add_field(
                name="–î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ä–æ–ª–∏:",
                value=allowed or "‚Äî",
                inline=False
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        logging.exception("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ bindsteam")
        if not interaction.response.is_done():
            await interaction.response.send_message("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", ephemeral=True)
        else:
            await interaction.followup.send("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", ephemeral=True)

    @app_commands.guilds(discord.Object(id=config.DEVELOPMENT_GUILD_ID))
    @app_commands.command(name="steamid", description="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π SteamID")
    @app_commands.describe(
        member="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤—ã)"
    )
    @app_commands.checks.has_any_role(*ALLOWED_ISSUER_ROLES)
    async def steamid(
        self,
        interaction: discord.Interaction,
        member: discord.Member = None
    ):
        if member is None:
            member = interaction.user  # type: ignore
        await interaction.response.defer()
        await self._show(member, interaction.followup.send)

    @steamid.error
    async def steamid_error(self, interaction: discord.Interaction, error):
        if isinstance(error, app_commands.MissingAnyRole):
            allowed = " ".join(f"<@&{rid}>" for rid in ALLOWED_ISSUER_ROLES)
            embed = discord.Embed(
                title="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω",
                description="–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
                color=discord.Color.red()
            )
            embed.add_field(
                name="–î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ä–æ–ª–∏:",
                value=allowed or "‚Äî",
                inline=False
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        logging.exception("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ steamid")
        if not interaction.response.is_done():
            await interaction.response.send_message("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", ephemeral=True)
        else:
            await interaction.followup.send("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", ephemeral=True)

    @app_commands.guilds(discord.Object(id=config.DEVELOPMENT_GUILD_ID))
    @app_commands.command(name="unbindsteam", description="–û—Ç–≤—è–∑–∞—Ç—å SteamID")
    @app_commands.describe(
        member="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤—ã)"
    )
    @app_commands.checks.has_any_role(*ALLOWED_ISSUER_ROLES)
    async def unbindsteam(
        self,
        interaction: discord.Interaction,
        member: discord.Member = None
    ):
        if member is None:
            member = interaction.user  # type: ignore
        await interaction.response.defer()
        await self._unbind(member, interaction.followup.send)

    @unbindsteam.error
    async def unbindsteam_error(self, interaction: discord.Interaction, error):
        if isinstance(error, app_commands.MissingAnyRole):
            allowed = " ".join(f"<@&{rid}>" for rid in ALLOWED_ISSUER_ROLES)
            embed = discord.Embed(
                title="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω",
                description="–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
                color=discord.Color.red()
            )
            embed.add_field(
                name="–î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ä–æ–ª–∏:",
                value=allowed or "‚Äî",
                inline=False
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
        logging.exception("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ unbindsteam")
        if not interaction.response.is_done():
            await interaction.response.send_message("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", ephemeral=True)
        else:
            await interaction.followup.send("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", ephemeral=True)

async def setup(bot: commands.Bot):
    await bot.add_cog(SteamCog(bot))
