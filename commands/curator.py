# commands/curator.py

import datetime
import logging
from sqlalchemy.exc import SQLAlchemyError

import discord
from discord import app_commands
from discord.ext import commands

import config  # DEVELOPMENT_GUILD_ID, EMBLEM_URL
from database import get_db, User
from roles.constants import (
    arc_id,
    lrc_gimel_id,
    lrc_id,
    head_ji_id,
    adjutant_ji_id,
    leader_office_id,
    leader_penal_battalion_id,
    senate_id,
    head_curator_id,
    director_office_id,
    leader_main_corps_id,
    leader_gimel_id,
    curator_id,
)

# –†–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è curator-–∫–æ–º–∞–Ω–¥–∞–º–∏
ALLOWED_CURATOR_ROLES = [
    arc_id,
    lrc_gimel_id,
    lrc_id,
    head_ji_id,
    adjutant_ji_id,
    leader_office_id,
    leader_penal_battalion_id,
    senate_id,
    head_curator_id,
    director_office_id,
    leader_main_corps_id,
    leader_gimel_id,
    curator_id,
]

# URL –≤–∞—à–µ–≥–æ bottom-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
LEGENDS_URL = (
    "https://media.discordapp.net/attachments/"
    "1303690765163036672/1360325913761415200/Legends.png"
)

class CuratorCog(commands.Cog):
    """
    Cog –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã:
      ‚Ä¢ /assigncurator ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞
      ‚Ä¢ /removecurator  ‚Äî —É–¥–∞–ª–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞
      ‚Ä¢ /whoiscurator   ‚Äî —É–∑–Ω–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞
    """

    def __init__(self, bot: commands.Bot):
        self.bot = bot

    def _make_embed(
        self,
        title: str,
        description: str,
        color: discord.Color = discord.Color.from_rgb(255, 255, 255)
    ) -> discord.Embed:
        """–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ Embed —Å —ç–º–±–ª–µ–º–æ–π –∏ bottom-–∫–∞—Ä—Ç–∏–Ω–∫–æ–π."""
        em = discord.Embed(
            title=title,
            description=description,
            color=color,
            timestamp=datetime.datetime.utcnow()
        )
        em.set_thumbnail(url=config.EMBLEM_URL)
        em.set_image(url=LEGENDS_URL)
        em.set_footer(
            text="‚Äî –í–æ—Å–ø–∏—Ç–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–ª–∞–Ω—Ç–æ–≤ ‚Äî –Ω–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞",
            icon_url=config.EMBLEM_URL
        )
        return em

    @app_commands.guilds(discord.Object(id=config.DEVELOPMENT_GUILD_ID))
    @app_commands.command(
        name="assigncurator",
        description="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞"
    )
    @app_commands.describe(
        member="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–∑–Ω–∞—á–∞–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞",
        curator="–ö—Ç–æ —Å—Ç–∞–Ω–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–º"
    )
    @app_commands.checks.has_any_role(*ALLOWED_CURATOR_ROLES)
    async def assigncurator(
        self,
        interaction: discord.Interaction,
        member: discord.Member,
        curator: discord.Member
    ):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î, —á—Ç–æ curator —Ç–µ–ø–µ—Ä—å –∫—É—Ä–∞—Ç–æ—Ä –¥–ª—è member."""
        await interaction.response.defer(thinking=True)
        db = next(get_db())
        try:
            # 1) User –¥–ª—è member
            user = db.query(User).filter_by(discord_id=member.id).first()
            if not user:
                user = User(discord_id=member.id, call_sign=member.display_name)
                db.add(user); db.flush()

            # 2) User –¥–ª—è curator
            cur = db.query(User).filter_by(discord_id=curator.id).first()
            if not cur:
                cur = User(discord_id=curator.id, call_sign=curator.display_name)
                db.add(cur); db.flush()

            # 3) –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º
            user.curator_id = cur.id
            db.commit()

            em = self._make_embed(
                title="‚úÖ –ö—É—Ä–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω",
                description=f"{curator.mention} —Ç–µ–ø–µ—Ä—å –∫—É—Ä–∞—Ç–æ—Ä –¥–ª—è {member.mention}."
            )
            await interaction.followup.send(embed=em)
        except SQLAlchemyError:
            db.rollback()
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞")
            em = self._make_embed(
                title="‚ùó –û—à–∏–±–∫–∞",
                description="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=em, ephemeral=True)
        finally:
            db.close()

    @assigncurator.error
    async def assigncurator_error(self, interaction: discord.Interaction, error):
        if isinstance(error, app_commands.MissingAnyRole):
            allowed = " ".join(f"<@&{rid}>" for rid in ALLOWED_CURATOR_ROLES)
            em = discord.Embed(
                title="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω",
                description="–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
                color=discord.Color.red()
            )
            em.add_field(
                name="–î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ä–æ–ª–∏:",
                value=allowed or "‚Äî",
                inline=False
            )
            em.set_thumbnail(url=config.EMBLEM_URL)
            await interaction.response.send_message(embed=em, ephemeral=True)
        else:
            logging.exception("–û—à–∏–±–∫–∞ –≤ assigncurator")
            await interaction.response.send_message(
                "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.", ephemeral=True
            )

    @app_commands.guilds(discord.Object(id=config.DEVELOPMENT_GUILD_ID))
    @app_commands.command(
        name="removecurator",
        description="–£–¥–∞–ª–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞"
    )
    @app_commands.describe(
        member="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —É–¥–∞–ª—è–µ–º –∫—É—Ä–∞—Ç–æ—Ä–∞"
    )
    @app_commands.checks.has_any_role(*ALLOWED_CURATOR_ROLES)
    async def removecurator(
        self,
        interaction: discord.Interaction,
        member: discord.Member
    ):
        """–£–¥–∞–ª—è–µ—Ç —É member –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞."""
        await interaction.response.defer(thinking=True)
        db = next(get_db())
        try:
            user = db.query(User).filter_by(discord_id=member.id).first()
            if not user or user.curator_id is None:
                em = self._make_embed(
                    title="‚ÑπÔ∏è –ö—É—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    description=f"–£ {member.mention} –∫—É—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.",
                    color=discord.Color.orange()
                )
            else:
                user.curator_id = None
                db.commit()
                em = self._make_embed(
                    title="‚úÖ –ö—É—Ä–∞—Ç–æ—Ä —É–¥–∞–ª—ë–Ω",
                    description=f"–ö—É—Ä–∞—Ç–æ—Ä –¥–ª—è {member.mention} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω."
                )
            await interaction.followup.send(embed=em)
        except SQLAlchemyError:
            db.rollback()
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞")
            em = self._make_embed(
                title="‚ùó –û—à–∏–±–∫–∞",
                description="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=em, ephemeral=True)
        finally:
            db.close()

    @removecurator.error
    async def removecurator_error(self, interaction: discord.Interaction, error):
        if isinstance(error, app_commands.MissingAnyRole):
            allowed = " ".join(f"<@&{rid}>" for rid in ALLOWED_CURATOR_ROLES)
            em = discord.Embed(
                title="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω",
                description="–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
                color=discord.Color.red()
            )
            em.add_field(
                name="–î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ä–æ–ª–∏:",
                value=allowed or "‚Äî",
                inline=False
            )
            em.set_thumbnail(url=config.EMBLEM_URL)
            await interaction.response.send_message(embed=em, ephemeral=True)
        else:
            logging.exception("–û—à–∏–±–∫–∞ –≤ removecurator")
            await interaction.response.send_message(
                "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.", ephemeral=True
            )

    @app_commands.guilds(discord.Object(id=config.DEVELOPMENT_GUILD_ID))
    @app_commands.command(
        name="whoiscurator",
        description="–£–∑–Ω–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    @app_commands.describe(
        member="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤—ã)"
    )
    @app_commands.checks.has_any_role(*ALLOWED_CURATOR_ROLES)
    async def whoiscurator(
        self,
        interaction: discord.Interaction,
        member: discord.Member = None
    ):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if member is None:
            member = interaction.user  # type: ignore

        await interaction.response.defer(thinking=True)
        db = next(get_db())
        try:
            user = db.query(User).filter_by(discord_id=member.id).first()
            if user and user.curator_id:
                curator_rec = db.query(User).get(user.curator_id)
                if curator_rec:
                    cm = interaction.guild.get_member(curator_rec.discord_id) if interaction.guild else None
                    mention = cm.mention if cm else f"<@{curator_rec.discord_id}>"
                    desc = f"üîπ –ö—É—Ä–∞—Ç–æ—Ä –¥–ª—è {member.mention}: {mention}"
                else:
                    desc = f"‚ÑπÔ∏è –ö—É—Ä–∞—Ç–æ—Ä –¥–ª—è {member.mention} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–∏–ª—å–¥–∏–∏."
            else:
                desc = f"‚ÑπÔ∏è –î–ª—è {member.mention} –∫—É—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω."
            em = self._make_embed(
                title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä–∞—Ç–æ—Ä–µ",
                description=desc,
                color=discord.Color.blue()
            )
            await interaction.followup.send(embed=em)
        except SQLAlchemyError:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä–∞—Ç–æ—Ä–µ")
            em = self._make_embed(
                title="‚ùó –û—à–∏–±–∫–∞",
                description="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=em, ephemeral=True)
        finally:
            db.close()

    @whoiscurator.error
    async def whoiscurator_error(self, interaction: discord.Interaction, error):
        if isinstance(error, app_commands.MissingAnyRole):
            allowed = " ".join(f"<@&{rid}>" for rid in ALLOWED_CURATOR_ROLES)
            em = discord.Embed(
                title="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω",
                description="–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
                color=discord.Color.red()
            )
            em.add_field(
                name="–î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ä–æ–ª–∏:",
                value=allowed or "‚Äî",
                inline=False
            )
            em.set_thumbnail(url=config.EMBLEM_URL)
            await interaction.response.send_message(embed=em, ephemeral=True)
        else:
            logging.exception("–û—à–∏–±–∫–∞ –≤ whoiscurator")
            await interaction.response.send_message(
                "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.", ephemeral=True
            )

async def setup(bot: commands.Bot):
    await bot.add_cog(CuratorCog(bot))
